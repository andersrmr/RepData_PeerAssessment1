msq(maxTime=1440)
msq(seed=12345,maxTime=1440,numServers=3)
?msq
msq(maxTime=1440,numServers=4,arrivalFunction=myArr,
serviceFunction=mySvc)
myArr=function() {0.25}
mySvc=function() {runif(1, min=075, max=1.25)}
msq(maxTime=1440,numServers=4,arrivalFunction=myArr,
serviceFunction=mySvc)
mySvc=function() {runif(1, min=0.75, max=1.25)}
msq(maxTime=1440,numServers=4,arrivalFunction=myArr,
serviceFunction=mySvc)
mySvc
myArr
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
msq(maxTime=1440,numServers=3,arrivalFunction=myArr,
serviceFunction=mySvc)
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
msq(maxTime=1440,numServers=6,arrivalFunction=myArr,
serviceFunction=mySvc)
myArr=function() {rexp(1, rate=4)}
mySvc=function() {runif(1, min=0.75, max=1.25)}
msq(maxTime=1440,numServers=6,arrivalFunction=myArr,
serviceFunction=mySvc)
# myArr=function() {0.25}
myArr=function() {rexp(1, rate=4)}
mySvc=function() {runif(1, min=0.75, max=1.25)}
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
#Constant Arrival but random service processes
# myArr=function() {0.25}
myArr=function() {rexp(1, rate=4)}
mySvc=function() {runif(1, min=0.75, max=1.25)}
msq(maxTime=1440,numServers=4,arrivalFunction=myArr,
serviceFunction=mySvc)
#Constant Arrival but random service processes
myArr=function() {0.25}
# myArr=function() {rexp(1, rate=4)}
mySvc=function() {runif(1, min=0.75, max=1.25)}
msq(maxTime=1440,numServers=4,arrivalFunction=myArr,
serviceFunction=mySvc)
#Constant Arrival but random service processes
#  myArr=function() {0.25}
myArr=function() {rexp(1, rate=4)}
mySvc=function() {runif(1, min=0.75, max=1.25)}
msq(maxTime=1440,numServers=4,arrivalFunction=myArr,
serviceFunction=mySvc)
#  myArr=function() {0.25}
myArr=function() {rexp(1, rate=4)}
mySvc=function() {runif(1, min=0.75, max=1.25)}
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
mySvc=function() {triangular(0.25,2.0,0.75)}
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
??triangular
mySvc=function() {rtriangule(0.25,2.0,0.75)}
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
mySvc=function() {rtriangle(0.25,2.0,0.75)}
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
?triangle
?rtriangle
mySvc=function() {rtriangle(1,0.25,2.0,0.75)}
msq(maxTime=1440,numServers=5,arrivalFunction=myArr,
serviceFunction=mySvc)
msq(maxTime=1440)
myLag=function() {runif(1) }
inv(seed=12345, maxTime=52, reorderThreshold=30)$avgShortageLevel
inv(seed=12345, maxTime=52, reorderThreshold=30)
?inv
myLag=function() {runif(1) }
results <- inv(seed=12345, maxTime=52,
reorderThreshold=20
lagFunction=myLag)$avgShortageLevel
results <- inv(seed=12345, maxTime=52,
reorderThreshold=20,
lagFunction=myLag)$avgShortageLevel
results
250*results$setupFreq
+ 20*results$avgHoldingLevel
+ 150*results$avgshortageLevel
results
results <- inv(seed=12345, maxTime=52,
reorderThreshold=20,
lagFunction=myLag)
results
250*results$setupFreq
+ 20*results$avgHoldingLevel
+ 150*results$avgshortageLevel
results
250*results$setupFreq
+ 20*results$avgHoldingLevel
+ 150*results$avgshortageLevel
250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgshortageLevel
250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
250*results$setupFreq
+20*results$avgHoldingLevel
+150*results$avgShortageLevel
results <- inv(seed=12345, maxTime=52,
reorderThreshold=20,
lagFunction=myLag)
# results
250*results$setupFreq
+20*results$avgHoldingLevel
+150*results$avgShortageLevel
results <- inv(seed=12345, maxTime=52,
reorderThreshold=20,
lagFunction=myLag)
# results
Cost <- 250*results$setupFreq
+20*results$avgHoldingLevel
+150*results$avgShortageLevel
Cost
results <- inv(seed=12345, maxTime=52,
reorderThreshold=20,
lagFunction=myLag)
# results
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
Cost
for (i in 1:100 by 5) {
results <- inv((seed=12345, maxTime=52,
reorderThreshold=i,
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
Cost
}
for (i in 1:100 by 5) {
results <- inv((seed=12345, maxTime=52,
reorderThreshold=i,
lagFunction=myLag))
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
Cost
}
for (i in 1:100 by 5) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold=i,
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
Cost
}
for (i in 1:100 by 5) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold==i,
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
Cost
}
for (i in 0:100 by 5) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold==i,
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
Cost
}
cost
for (i in 0:100 by 5) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold==i,
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
}
for (i in 0:100 by 5) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold=i,
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
}
?for
seq(5,100,5)
seq(5,100,2)
iter <- seq(5,100,2)
for (i in iter) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold=iter[i],
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
}
iter <- seq(10,100,2)
for (i in iter) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold=iter[i],
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
}
cost
iter <- seq(20,60,2)
for (i in iter) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold=iter[i],
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
}
iter <- seq(20,60,2)
for (i in iter) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold=iter[i],
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
}
iter
iter <- 40
for (i in iter) {
results <- inv(seed=12345, maxTime=52,
reorderThreshold=iter[i],
lagFunction=myLag)
Cost <- 250*results$setupFreq+20*results$avgHoldingLevel+150*results$avgShortageLevel
}
myLag
results <- inv(seed=12345, maxTime=52,
reorderThreshold=40,
lagFunction=myLag)
# results
results
(.3+.5)*2*sqrt(5)
=1-pbinom(3,5,.5)
?pbinom
=1-pbinom(3,5,.5)
1-pbinom(3,5,.5)
?norm
?rnorm
sqrt(0.5*1-0.5)/5)
sqrt(0.5*(1-0.5)/5)
sqrt(.5/5)
sqrt(0.5*(1-0.5)/5)
sqrt(.25/5)
sqrt(0.5*0.5/5)
pnorm(3.578,.2236)
1-pnorm(3.578,.2236)
pnorm(16,15,1)-pnorm(14,15,1)
?pois
?rpois
1/1200
sqrt(1/1200)
ppois(10,5)
ppois(10,5)^3-
)
ppois(10,5)^3)
ppois(10,5)^3
ppois(10,15)
?qnorm
qnorm(0.95, mean=1100,sd=75)
qnorm(0.95, mean=1100,sd=7.5)
data(ToothGrowth)
head(ToothGrowth)
str(ToothGrowth)
?ToothGrowth
attach(ToothGrowth)
unique(dose)
unique(len)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
summary(ToothGrowth)
class(ToothGrowth)
library(ggplot2)
qplot(dose,len,data=ToothGrowth,facets=.~supp)
qplot(dose,len,data=ToothGrowth,geom=c("point","smooth",
method="lm",
facets=.~supp))
qplot(dose,len,data=ToothGrowth,geom=c("point","smooth"),
method="lm",
facets=.~supp)
qplot(dose,len,data=ToothGrowth,geom=c("point","smooth"),
#       method="lm",
facets=.~supp)
include(ToothGrowth)
require(ToothGrowth)
qplot(dose,len,data=ToothGrowth,geom=c("point","smooth"),
#       method="lm",
facets=.~supp)
head(ToothGrowth)
str(ToothGrowth)
?ToothGrowth
search(0)
search()
len[supp=VC]
len[supp==VC]
len[supp=="VC"]
len[supp=="VC" & dose==0.5]
oj_1 <- len[supp=="OJ" & dose==0.5]
oj_1 <- len[supp=="OJ" & dose==1.0]
oj_1
oj_1 <- len[supp=="OJ" & dose==1.0]
oj_1
oj_p5 <- len[supp=="OJ" & dose==0.5]
t.test(oj_1, oj_p5)
?t.test
t.test(oj_1, oj_p5,var.equal=FALSE)
?ToothGrowth
t.test(oj_1, oj_p5,var.equal=FALSE,paired=TRUE)
oj_2 <- len[supp=="OJ" & dose==2.0]
t.test(oj_2, oj_1,var.equal=FALSE,paired=TRUE)
vc_2 <- len[supp=="VC" & dose==2.0]
vc_1 <- len[supp=="VC" & dose==1.0]
vc_p5 <- len[supp=="VC" & dose==0.5]
t.test(vc_1, vc_p5,var.equal=FALSE,paired=TRUE)
t.test(vc_2, vc_1,var.equal=FALSE,paired=TRUE)
t.test(oj_1, vc_1,var.equal=FALSE,paired=TRUE)
t.test(vc_2, oj_2,var.equal=FALSE,paired=TRUE)
mean(oj_1)
mean(vc_1)
mean(vc_0.5)
mean(vc_0p5)
mean(vc_p5)
mean(oj_p5)
t.test(oj_p5, vc_p5,var.equal=FALSE,paired=TRUE)
pwd
0.7906^2
.7859^2
?shuttle
library(MASS)
?shuttle
head(shuttle)
str(shuttle)
auto.odds <- glm(shuttle$use ~ factor(shuttle$wind), family="binomial")
summary(auto.odds)
exp(-.25131)
exp(-0.03181)
head(shuttle)
ifelse(grepl("auto",shuttle$use,ignore.case=T),1,0)
ifelse(grepl("noauto",shuttle$use,ignore.case=T),0,1)
head(shuttle)
shuttle$use.num <- ifelse(grepl("noauto",shuttle$use,ignore.case=T),0,1)
head(shuttle)
head(shuttle,20)
shuttle[shuttle$use=="noauto",]
shuttle[shuttle$use=="auto",]
auto.odds <- glm(shuttle$use.num ~ factor(shuttle$wind), family="binomial")
summary(auto.odds)
exp(.03181)
exp(.03181)^-1
auto.odds <- glm(shuttle$use.num ~ factor(shuttle$wind)
+ factor(shuttle$magn), family="binomial")
summary(auto.odds)
exp(-.03201)
exp(-.03201)^-1
exp(.25131)
exp(.25131)^-1
auto.odds <- glm(shuttle$use.num ~ shuttle$wind, family="binomial")
summary(auto.odds)
wind2 <- relevel(shuttle$wind, "tail")
auto.odds <- glm(shuttle$use.num ~ shuttle$wind2, family="binomial")
summary(auto.odds)
auto.odds <- glm(shuttle$use.num ~ wind2, family="binomial")
summary(auto.odds)
exp(-.03181)
summary(auto.odds)$coeffs
summary(auto.odds)$coefficents
summary(auto.odds)$coefficients
summary(auto.odds)$coefficients[2]
exp(summary(auto.odds)$coefficients[2])
auto.odds <- glm(shuttle$use.num ~ wind2
+ shuttle$magn, family="binomial")
summary(auto.odds)$coefficients
summary(auto.odds)$coefficients[2]
exp(summary(auto.odds)$coefficients[2]) #0.969
summary(auto.odds)
auto.odds <- glm(1-shuttle$use.num ~ wind2, family="binomial")
summary(auto.odds)
auto.odds <- glm(shuttle$use.num ~ wind2, family="binomial")
summary(auto.odds)
exp(-.03181)
exp(.03181)
?Insectspray
?InsectSprays
head(InsectSprays)
str(InsectSprays)
glm1 <- glm(count ~ spray, family="poisson")
summary(glm1)
glm1 <- glm(count ~ spray, data = InsectSprays, family="poisson")
summary(glm1)
spray2 <- relevel(InsectSprays$count, "B")
glm2 <- glm(count ~ spray2, data = InsectSprays, family="binomial")
spray2 <- relevel(InsectSprays$spray, "B")
glm2 <- glm(count ~ spray2, data = InsectSprays, family="binomial")
spray2
glm2 <- glm(count ~ spray2, data = InsectSprays, family="poisson")
summary(glm2)
glm3 <- glm(count ~ spray2 + log(10), data = InsectSprays, family = poisson)
lm3 <- glm(count ~ spray2 + offset(log(10)),
data = InsectSprays, family = poisson)
exp(-.05588)
glm3 <- glm(count ~ spray2*10,
data = InsectSprays, family = poisson)
glm3 <- glm(count ~ spray2,
data = InsectSprays, offset=log(10), family = poisson)
glm3 <- glm(count ~ spray2,
data = InsectSprays, offset=log(10), family = "poisson")
glm2 <- glm(count ~ spray2, data = InsectSprays, family="poisson")
glm3 <- glm(count ~ spray2,
data = InsectSprays, offset=log(10), family = "poisson")
glm3 <- glm(count ~ spray2,
data = InsectSprays, offset=10, family = "poisson")
log(10)
str(InsectSprays)
head(InsectSprays)
glm3 <- glm(count ~ spray2 + log(10),
data = InsectSprays, family = "poisson")
?glm
glm3 <- glm(count ~ spray2, offset=rep(log(10, 72))
data = InsectSprays, family = "poisson")
glm3 <- glm(count ~ spray2, offset=rep(log(10), 72)
data = InsectSprays, family = "poisson")
glm3 <- glm(count ~ spray2, offset=rep(log(10), 72),
data = InsectSprays, family = "poisson")
summary(glm3)
glm2 <- glm(count ~ spray2, data = InsectSprays, family="poisson")
summary(glm2)
summary(glm2)$coefficients      #-0.9457
glm3 <- glm(count ~ spray2, offset=rep(log(10), 72),
data = InsectSprays, family = "poisson")
summary(glm3)
summary(glm3)$coefficients
glm2 <- glm(count ~ spray2, data = InsectSprays, family="poisson")
summary(glm2)
summary(glm2)$coefficients      #-0.9457
summary(glm3)$coefficients
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
knot <- 0
splineTerms <- sapply(knots, function(knot) (x>knot*(x-knot)))
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
xMat <- cbind(1,x,splineTerms)
xMat
summary(lm(y~xMat-1))$coefficients
yhat <- predict(lm(y~xMat-1))
plot(x,y)
lines(x,yhat)
b <- c(140,138,150,148,135)
a <- c(132,135,151,146,130)
?t.test
t.test(a,b,alternative="two-sided",paired=TRUE)
t.test(a,b,alternative="two.sided",paired=TRUE)
1-.05/2
1100 + c(-1,1)*qt(8,.975)*10
?qt
1100 + c(-1,1)*qt(.975,8)*10
?binomial.test
?binom.test
binom.test(3,4,alternative="l")
binom.test(3,4,alternative="g")
?poisson.test
10/1787
1/100
poisson.test(10,1787,.01,alternative="l")
?t.test
sp <- sqrt(0.5*1.5*1.5 + 0.5*1.8*1.8))
-3-1 + c(-1,1)*qt(0.975,16)*sp*sqrt(2/9)
sp <- sqrt(0.5*1.5*1.5 + 0.5*1.8*1.8)
-3-1 + c(-1,1)*qt(0.975,16)*sp*sqrt(2/9)
?t.test
qt(0.975,16)
-4/(sp*sqrt(2/9))
1-0.05/2
.05/2
qt(.05/2,16)
qt(0.01/2,16)
1-.1/2
1-.05/2
?pnorm
sp <- sqrt(0.5*12*12 + 0.5*12*12)
(44-42.04)/sp/sqrt(288)
pnorm(.0096,)
.05^10
.05*10
d <- read.csv("activity.csv",header=TRUE)
setwd("C:/Users/Admin/RepResr/RepData_PeerAssessment1")
d <- read.csv("activity.csv",header=TRUE)
s <- split(d,d$interval)
interval <- d[d$date=="2012-10-01","interval"]
activity <- sapply(s, function(x) mean(x[,1],na.rm=TRUE))
plot(interval,activity,type="l")
class(activity)
head(activity)
names(activity)
is.list(activity)
head(activity)
max(activity)
names(max(activity))
is.numeric(activity)
?name
as.name(max(activity))
?label
max(activity)
activity
head(d)
is.na(d$Steps)
is.na(d$steps)
sum(is.na(d$steps))
is.na(d$steps[10000])
is.na(d$steps[9791])
sum(is.na(d$steps[10000]))
sum(is.na(d$steps[9791]))
sum(!is.na(d$steps))
sum(!is.na(d$steps))
head(activity)
head(d)
as.list(activity)
max(as.list(activity))
as.list(max(activity))
as.list(activity)
as.list(activity)$2355
as.list(activity)$'2355'
as.list(activity)$"2355"
s
activity[1]
